schema product {

  document product {

    field id type int {
      indexing: attribute | summary
    }

    field title type string {
      indexing: index | summary
      index: enable-bm25
    }

    field description type string {
      indexing: index | summary
      index: enable-bm25
    }

    field category type string {
      indexing: attribute | summary
      attribute: fast-search
      match: word
      rank: filter
    }

    field price type int {
      indexing: attribute | summary
    }

    field average_rating type float {
      indexing: attribute | summary
    }

  }

  # TODO define your "embedding" field here, because it will be "artificially"
  # generated from existing fields

  fieldset default {
    fields: title, description
  }

  # semantic search rank profile. Refer to it in your query by adding:
  # "ranking.profile": "closeness"
  rank-profile closeness {
    inputs {
      query(q_embedding) tensor<float>(x[384])
    }
    first-phase {
      expression: closeness(field, embedding)
    }
  }

  # TODO hybrid search rank profile
  # make sure to refer to it in the query
  #
  # rank-profile rrf inherits closeness {
  #   function best_bm25() {
  #     expression: max(bm25(title), bm25(description))
  #   }
  #   global-phase {
  #     # TODO: you have a closeness() function inherited and a best_bm25() function defined here
  #     # now define the reciprocal rank fusion expression
  #     rerank-count: 200
  #   }
  # }

  document-summary minimal {
    summary id {}
  }

  document-summary medium {
    summary id {}
    summary title {}
    summary description {}
  }

}
