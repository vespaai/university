Deploy a schema to match a more complex dataset

Modify schema to one below:

    schema product {
        document product {
            field ProductID type string {
                indexing: summary | attribute
            }

            field ProductName type string {
                indexing: summary | index
            }

            field ProductBrand type string {
                indexing: summary | index
            }

            field Gender type string {
                indexing: summary | index
            }

            field Price type float {
                indexing: summary | attribute
            }

            field NumImages type int {
                indexing: summary | attribute
            }

            field Description type string {
                indexing: summary | index
            }

            field PrimaryColor type string {
                indexing: summary | index
            }
        }

        fieldset default {
            fields: ProductName,Description
        }

        rank-profile default {
            first-phase {
                expression: nativeRank(ProductName, Description)
            }
        }
    }

Feed documents
    vespa feed ext/products.jsonl

EXERCISES

A. FULL-TEXT SEARCH WITHIN A SINGLE FIELD
Search for "shirt" in ProductName.
Example vespa-cli:

    vespa query 'select * from product where ProductName contains "shirt"'

Or with curl (POST):

    curl -X POST "https://<YOUR_VESPA_ENDPOINT>/search/" --cert <PRIVATE_KEY_FILE>.pem --key <PRIVATE_KEY_FILE>.key -H "Content-Type: application/json" -d '{"yql": "select * from sources product where ProductName contains \"shirt\""}'

B. FULL-TEXT SEARCH WITHIN MULTIPLE FIELDS
Search for "shirt" in both ProductName and Description.
For example:

    vespa query 'select * from product where (ProductName contains "shirt" or Description contains "shirt")'

Using fieldset
    vespa query 'select * from product where default contains "shirt"'

C. KEYWORD FILTERING
Find shirts that are blue or red.
Example:

    vespa query 'select * from product where (PrimaryColor contains "blue" or PrimaryColor contains "red")'

D. ADDITIONAL FILTERING CONDITIONS
Combine color and price filter.
Example:

    vespa query 'select * from product where (PrimaryColor contains "blue" or PrimaryColor contains "red") and Price < 500'

E. PHRASE SEARCH
Get documents where Description contains the phrase "premium cotton".
Example:

    vespa query 'select * from product where Description contains phrase("premium cotton")'

F. LIMITING NUMBER OF RETURNED RESULTS
Return only the top 5 hits.
Example:

    vespa query 'select * from product where (Description contains phrase("premium cotton")) limit 5'

G. SELECTING FIELDS TO RETURN
Return only ProductName, Description, Price, PrimaryColor.
Example:

    vespa query 'select ProductName, Description, Price, PrimaryColor from product where true'

Alternatively, define a custom summary in the schema or use the summary API.

First add the summary to the schema file:

    document-summary brief {
        summary ProductName type string {}
        summary Description type string {}
        summary Price type float {}
        summary PrimaryColor type string {}
    }

Query which contains summary selection
    vespa query 'select * from product where true' 'presentation.summary=brief'


H. RANK PROFILES
Compare default nativeRank vs BM25.

Enable bm25 on ProductDescription in the schema (as shown above).
    
    field ProductName type string {
        indexing: summary | index
        index: enable-bm25
    }

Keep the default rank-profile:

   rank-profile default {
       first-phase {
           expression: nativeRank(Description)
       }
   }

Define bm25 rank-profile:

   rank-profile bm25 {
       first-phase {
           expression: bm25(Description)
       }
   }

Deploy the app again.

Query with ranking=default:

    vespa query 'select * from product where Description contains "shirt"'

Query with ranking=bm25:

    vespa query 'select * from product where Description contains "shirt"' ranking=bm25

Observe changes in the score returned.