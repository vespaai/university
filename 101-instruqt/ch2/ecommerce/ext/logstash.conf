input {
    file {
        # TODO: change this to the absolute path of the CSV file
        # path => "/PATH/TO/sample-apps/examples/training-artifacts/101/ch2/ecommerce/ext/myntra_products_catalog.csv"
        # don't store the state of the file, so that Logstash will read the file from the beginning on each restart
        sincedb_path => "/dev/null"
        start_position => "beginning"

        # some rows are split into multiple lines
        codec => multiline {
            # lines start with the ID like this: 10019509,
            pattern => "^\d+,"
            # so if we don't match the pattern
            negate => true
            # this line belongs to the previous row
            what => "previous"
        }
    }
}

filter {
    # parse the CSV file
    csv {
        columns => ["ProductID", "ProductName", "ProductBrand", "Gender", "Price", "NumImages", "Description", "PrimaryColor"]
        # skip the first line, which contains the column names
        skip_header => true
        separator => ","
        quote_char => '"'
    }

    # strip leading and trailing whitespace from fields
    mutate {
        strip => ["ProductName", "ProductBrand", "Gender", "Price", "NumImages", "Description", "PrimaryColor"]
    }

    if "_csvparsefailure" in [tags] {
        # we failed to parse this line, mark it so we don't feed it to Vespa
        mutate {
            add_field => { "skip_line" => true }
        }
    }

    # remove unnecessary fields (this includes tags=[multiline] which is added by the multiline codec if the row is indeed multiline)
    mutate {
        remove_field => ["message", "@timestamp", "@version", "event", "log", "host", "tags"]
    }
}

output {
    # did we fail to parse the line? let's print it
    if [skip_line] {
        stdout { codec => rubydebug }
    } else {
        # otherwise, feed the parsed data to Vespa
        vespa_feed {
            vespa_url => "http://localhost:8080"
            namespace => "product"
            document_type => "product"
            # use this field from the parsed CSV as the document ID
            id_field => "ProductID"
        }
    }
}